#login.svelte-mui2g8 .is-overlay.svelte-mui2g8{background-position:bottom !important;filter:blur(8px);-webkit-filter:blur(8px)}
#lobby.svelte-3ddgui.svelte-3ddgui{background-position:bottom !important;background-size:cover !important;background-repeat:no-repeat !important}.hover-glow.svelte-3ddgui.svelte-3ddgui{transition:ease-out 0.4s}.hover-glow.svelte-3ddgui.svelte-3ddgui:hover{filter:drop-shadow(0 0 15px #530BDB)}.screen-container.svelte-3ddgui.svelte-3ddgui{position:absolute;left:17%;top:-18vh;width:55vh}.screen-container.svelte-3ddgui img.svelte-3ddgui{width:55vh}.screen-container.svelte-3ddgui .screen-content.svelte-3ddgui{position:absolute;bottom:0;width:55vh;height:55vh;display:flex;align-items:flex-end;padding:2.65vh}.screen-container.svelte-3ddgui .screen-content iframe.svelte-3ddgui{width:100% !important;height:60.25% !important;background:#00121f}.menu-container.svelte-3ddgui.svelte-3ddgui{position:absolute;left:7%;bottom:-5vh;width:30vh;perspective:1000px;perspective-origin:50% 38%}.menu-container.svelte-3ddgui img.svelte-3ddgui{width:30vh}.menu-container.svelte-3ddgui .menu-content.svelte-3ddgui{position:absolute;top:50%;left:50%;max-width:100%;transform:translate(-43%, -69%) scale(0.7) rotate3d(0, 1, 0, 18deg)}.menu-container.svelte-3ddgui .menu-content .button.svelte-3ddgui{font-size:1.8vh;white-space:unset;height:auto;width:22vh;justify-content:space-between;text-align:right;margin-bottom:1vh}.menu-container.svelte-3ddgui .menu-content .title.svelte-3ddgui{font-size:2.6vh}.pedestal-container.svelte-3ddgui.svelte-3ddgui{position:absolute;right:10%;bottom:-5vh;max-width:30vh;transform:translateY(45%)}.button.is-control.svelte-3ddgui.svelte-3ddgui{position:absolute;background:white}.button.is-control.stands.svelte-3ddgui.svelte-3ddgui{left:22%;transform:translateY(-5vh)}.button.is-control.auditorio1.svelte-3ddgui.svelte-3ddgui{right:12%;transform:translateY(-10vh)}.button.is-control.auditorio2.svelte-3ddgui.svelte-3ddgui{left:54%;transform:translate(-15vh, -5vh)}.button.is-control.auditorio3.svelte-3ddgui.svelte-3ddgui{left:40%;transform:translate(-15vh, 2vh)}
ul.svelte-dlq7r{margin:0 0 1em 0;line-height:1.5}
.content.svelte-vowzsy h2{font-size:1.4em;font-weight:500}.content.svelte-vowzsy pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-vowzsy pre code{background-color:transparent;padding:0}.content.svelte-vowzsy ul{line-height:1.5}.content.svelte-vowzsy li{margin:0 0 0.5em 0}
#lobby-medios.svelte-z8dm2s.svelte-z8dm2s{background-position:bottom !important;background-size:cover !important;background-repeat:no-repeat !important}.controls.svelte-z8dm2s .button.svelte-z8dm2s{background:white;margin-bottom:1vh;width:100%;display:flex;justify-content:space-between}.button#volver.svelte-z8dm2s.svelte-z8dm2s{background:linear-gradient(71deg, #a100e0 0%, #e73c29 100%)}.button#volver.svelte-z8dm2s .icon.svelte-z8dm2s{background:white;color:black;height:50px;width:50px;margin-left:-25px;margin-right:20px}
iframe.svelte-1y5lqdg{width:100%;height:400px}
iframe.svelte-m7nov0{width:100%;height:50vh}.has-background-gradient.svelte-m7nov0{background:linear-gradient(71deg, #a100e0 0%, #520bd9 100%) !important}.card-content.svelte-m7nov0{height:30vh}
#stand.svelte-18mmk5o.svelte-18mmk5o{background-position:bottom !important;background-size:cover !important;background-repeat:no-repeat !important}.button#volver.svelte-18mmk5o.svelte-18mmk5o{background:linear-gradient(71deg, #a100e0 0%, #e73c29 100%)}.button#volver.svelte-18mmk5o .icon.svelte-18mmk5o{background:white;color:black;height:50px;width:50px;margin-left:-25px;margin-right:20px}
.modal-content.svelte-1fn1srg{width:90vw;height:90vh;display:flex;align-items:center}
.iframe-container.svelte-xjrdx.svelte-xjrdx{width:55vh;height:55vh;position:absolute;top:60%;left:47%;transform:translate(-50%, -50%)}.iframe-container.svelte-xjrdx iframe.svelte-xjrdx{width:100%;height:56%;overflow:hidden;border-radius:10px;box-shadow:0 0 60px rgba(0, 0, 0, 0.3)}.controls.svelte-xjrdx .button.svelte-xjrdx{background:white;font-weight:bold}.controls.svelte-xjrdx .button.is-primary.is-outlined.svelte-xjrdx{position:absolute;font-size:1.8vh}.controls.svelte-xjrdx .button.is-primary.is-outlined.has-iframe.svelte-xjrdx{top:-8vh;right:0}.controls.svelte-xjrdx .button.is-primary.is-outlined.has-gallery.svelte-xjrdx{bottom:30vh;left:15vw}.controls.svelte-xjrdx .button.is-primary.is-outlined.has-pdf.svelte-xjrdx{bottom:30vh;right:15vw}
.iframe-container.svelte-1ezxxf2.svelte-1ezxxf2{width:55vh;height:55vh;position:absolute;top:55%;left:70%;transform:translate(-50%, -50%)}.iframe-container.svelte-1ezxxf2 iframe.svelte-1ezxxf2{width:100%;height:56%;overflow:hidden;border-radius:10px;box-shadow:0 0 60px rgba(0, 0, 0, 0.3)}.controls.svelte-1ezxxf2 .button.svelte-1ezxxf2{background:white;font-weight:bold}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.svelte-1ezxxf2{position:absolute;font-size:1.8vh}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.svelte-1ezxxf2:hover,.controls.svelte-1ezxxf2 .button.is-primary.is-outlined .svelte-1ezxxf2:active{background:#500ADA}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.has-iframe.svelte-1ezxxf2{top:-8vh;right:0}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.has-gallery.svelte-1ezxxf2{bottom:32vh;left:16.5vw}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.has-chat.svelte-1ezxxf2{bottom:30vh;right:15vw}.controls.svelte-1ezxxf2 .button.is-primary.is-outlined.has-pdf.svelte-1ezxxf2{top:25vh;right:45vw}
.modal-content.svelte-hxqu00{width:90vw;height:90vh;display:flex;align-items:center;overflow:hidden}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */